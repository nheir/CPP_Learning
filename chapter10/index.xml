<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Param√®tres de templates :: Cours de C++ - Niveau Master</title><link>/chapter10/index.html</link><description>Dans ce deuxi√®me chapitre sur les templates, nous parlerons de tout un tas de fonctionnalit√©s et subtilit√©s li√©es aux param√®tres de templates. Installez-vous bien confortablement, faites-vous un ptit caf√©, et n‚Äôh√©sitez pas √† prendre une pause de temps en temps, parce que vous allez d√©couvrir beaucoup de choses pas forc√©ment faciles √† int√©grer du premier coup.</description><generator>Hugo</generator><language>fr</language><atom:link href="/chapter10/index.xml" rel="self" type="application/rss+xml"/><item><title>R√©f√©rence universelle</title><link>/chapter10/1-universal-ref/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/chapter10/1-universal-ref/index.html</guid><description>Dans cette premi√®re section, nous commencerons par introduire les concepts de l-value et r-value.
Cela nous conduira √† vous pr√©senter la notion de r√©f√©rence universelle. Nous vous expliquerons ensuite quand et comment vous en servir dans votre code.
l-value / r-value Avant de parler concr√®tement des r√©f√©rences universelles, il faut aborder un point essentiel √† leur compr√©hension.
En C++, une expression est une suite d‚Äôop√©rateurs et d‚Äôop√©randes pouvant √™tre √©valu√©e. L‚Äô√©valuation d‚Äôune expression peut parfois produire une valeur.</description></item><item><title>Template variadique</title><link>/chapter10/2-variadiac/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/chapter10/2-variadiac/index.html</guid><description>Un template variadique, c‚Äôest un template qui attend un nombre variable de param√®tres. Vous en avez d√©j√† utilis√© plusieurs, comme :
- la fonction-template emplace_back de std::vector, qui attend n‚Äôimporte quels nombres et types d‚Äôarguments, et les utilisent pour construire le nouvel √©l√©ment,
- la fonction-template std::make_unique, qui fonctionne sur le m√™me principe,
- la classe-template std::tuple, qui permet de repr√©senter un N-uplet contenant n‚Äôimporte quels types.
L‚Äôobjectif de cette section sera de vous apprendre √† d√©finir vos propres templates variadiques.</description></item><item><title>Sp√©cialisations</title><link>/chapter10/3-specializations/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/chapter10/3-specializations/index.html</guid><description>Cette section sera consacr√©e √† la sp√©cialisation de templates de fonctions et de classes.
Une sp√©cialisation est la red√©finition d‚Äôune entit√©e templat√©e, qui va s‚Äôappliquer pour des param√®tres particuliers. Il y a de nombreux cas d‚Äôutilisation des sp√©cialisation, l‚Äôun d‚Äôentre eux √©tant de d√©finir de traiter des cas particuliers.
Sp√©cialisation de fonctions Soit la fonction templat√©e suivante, permettant d‚Äôafficher des valeurs dans le terminal :
template &lt;typename T> void print(const T&amp; value) { std::cout &lt;&lt; value &lt;&lt; std::endl; } Si on lui passe des bool√©ens, cette fonction affichera 0 ou 1.</description></item><item><title>SFINAE</title><link>/chapter10/4-sfinae/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/chapter10/4-sfinae/index.html</guid><description>Nous allons maintenant vous expliquer ce que signifie SFINAE, le besoin auquel ce m√©canisme r√©pond et comment le mettre en oeuvre dans votre code.
Le besoin Supposons que nous souhaitions pouvoir r√©cup√©rer une clef pour diff√©rents type √† l‚Äôaide d‚Äôune fonction get_key(const Type&amp;), en utilisant des overloads.
class Person { public: Person(const std::string&amp; name) : _name { name } {} const std::string&amp; get_name() const { return _name; } private: const std::string _name; }; // Overload pour notre classe Person.</description></item><item><title>Questionnaire ‚òë</title><link>/chapter10/test/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/chapter10/test/index.html</guid><description>Pas de questionnaire cette semaine, parce que mis en ligne trop tard.
N‚Äôh√©sitez n√©anmoins pas √† utiliser le formulaire pour envoyer vos questions.
Vous √™tes : Votre adresse mail : Votre groupe : Initiaux 1 Initiaux 2 Alternants Combien de temps avez-vous mis √† compl√©ter ce chapitre ? Avez-vous des questions suite √† sa lecture ? Avez-vous des commentaires concernant le chapitre et/ou le site ?</description></item><item><title>Merci !</title><link>/chapter10/test_done/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/chapter10/test_done/index.html</guid><description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ N'h√©sitez pas √† nous relancer si vous n'avez pas eu de nouvelles apr√®s une semaine !</description></item></channel></rss>